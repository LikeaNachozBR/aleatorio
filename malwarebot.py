import discord
from bs4 import BeautifulSoup as Bs
import os
import urllib.request

headers = {'User-Agent': 'a'}

headers['User-Agent'] = "Mozilla/5.0 (X11; Windows i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17"

def pegar(rec, direct="https://github.com/malwaredevgroup/2017a/tree/master/Other/recomendations/"):
    url = direct
    url += rec
    pedido = urllib.request.Request(url, headers=headers)
    resposta = urllib.request.urlopen(pedido)
    codigo = resposta.read().decode(resposta.headers.get_content_charset())
    sopa = Bs(codigo)
    sopinha = sopa.find('table', {'class': 'highlight tab-size js-file-line-container'})
    sopinha = sopinha.findAll('td', {'class': 'blob-code blob-code-inner js-file-line'})
    final_string = '\n'.join([i.getText() for i in sopinha])
    return final_string

class Command:
    def __init__(self, main, aliases, permited, args={'main': 'teste'}):
        self.main = main
        if main not in aliases:
            aliases.append(main)
        self.aliases = aliases
        self.permited = permited
        self.args = args

    def __eq__(self, string):
        return any(string.startswith(i) for i in self.aliases)

    def valid_argument(self, argument):
        return argument in self.args


client = discord.Client()
token = os.environ['token']
commands = []


@client.event
async def on_ready():
    global commands

    pythonrecommendation = pegar('pythonrecommendation.txt')
    csharprecommendation = pegar('csharprecommendation.txt')
    cpprecommendation = pegar('cpprecommendation.txt')
    crecommendation = pegar('crecommendation.txt')
    assemblyrecommendation = pegar('assemblyrecommendation.txt')
    helpmalware = pegar('helpmalware.txt')
    commands = [Command('!recommendation', ['!rec', '!rc'], ['@everyone'], args={'python': pythonrecommendation,
                                                                                 'csharp': csharprecommendation,
                                                                                 'cpp': cpprecommendation,
                                                                                 'c': crecommendation,
                                                                                 'assembly': assemblyrecommendation
                                                                                 }),
                Command('!help', ['!', '!h'], ['@everyone'], args={'main': helpmalware})]
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')


@client.event
async def on_message(message):
    conteudo = message.content
    ok = False
    for i in commands:
        if i == conteudo:
            ok = True
            nl = [i.name for i in message.author.roles]
            if not all(ii in nl for ii in i.permited):
                await client.send_message(message.channel, 'You don\'t have enough permition')
                break
            cs = conteudo.split()
            if len(cs) == 1:
                if 'main' in i.args.keys():
                    await client.send_message(message.channel, i.args['main'])
                else:
                    await client.send_message(message.channel, 'Invalid number of arguments!')
            else:
                if len(cs) > 2:
                    await client.send_message(message.channel, 'Invalid number of arguments!')
                elif i.valid_argument(cs[1]):
                    await client.send_message(message.channel, i.args[cs[1]])
                else:
                    await client.send_message(message.channel, 'Invalid argument {}!'.format(cs[1]))
            break
    if (not ok) and conteudo.startswith('!'):
        await client.send_message(message.channel, 'Invalid command: {}'.format(conteudo))


client.run(token)
